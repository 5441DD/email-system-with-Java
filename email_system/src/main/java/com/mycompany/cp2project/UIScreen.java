/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cp2project;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ahmet
 */
public class UIScreen extends javax.swing.JFrame {

    /**
     * Creates new form UIScreen
     */
    
    //Defines tablemodels row and column names.
    
    String[] columnNames = {"Mail Content", "Sender", "Recipient"};
    Object[][] emptyData = {};
    DefaultTableModel tblmodel = new DefaultTableModel(emptyData, columnNames);
    DefaultTableModel tblmodel1 = new DefaultTableModel(emptyData, columnNames);
    public UIScreen() {
        initComponents();
        //If the user is admin then user will see even if mail is draft.
        if(Homescreen.user instanceof AdminUser){
        tblmodel.addColumn("Is draft");
        tblmodel1.addColumn("Is draft");
        }
        
        table_mail.setModel(tblmodel);
        table_sendedmail.setModel(tblmodel1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        popupmenuitem_delete = new javax.swing.JMenuItem();
        popupmenuitem_reply = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        button_refresh = new javax.swing.JButton();
        button_mailsend = new javax.swing.JButton();
        button_drafts = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        textfield_quicksearch = new javax.swing.JTextField();
        button_quicksearch = new javax.swing.JButton();
        button_advancedsearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_mail = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_sendedmail = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        MenuItem_cut = new javax.swing.JMenuItem();
        MenuItem_copy = new javax.swing.JMenuItem();
        MenuItem_paste = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuItem_logout = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        CheckBoxMenuItem_darkmode = new javax.swing.JCheckBoxMenuItem();

        popupmenuitem_delete.setText("Delete");
        popupmenuitem_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupmenuitem_deleteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popupmenuitem_delete);

        popupmenuitem_reply.setText("Reply");
        popupmenuitem_reply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupmenuitem_replyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popupmenuitem_reply);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mailbox Overview");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        button_refresh.setText("Refresh");
        button_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_refreshActionPerformed(evt);
            }
        });

        button_mailsend.setText("Send Mail");
        button_mailsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_mailsendActionPerformed(evt);
            }
        });

        button_drafts.setText("Drafts");
        button_drafts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_draftsActionPerformed(evt);
            }
        });

        jButton1.setText("Edit User Infos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        button_quicksearch.setText("Quick Search");
        button_quicksearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_quicksearchActionPerformed(evt);
            }
        });

        button_advancedsearch.setText("Advanced Search");
        button_advancedsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_advancedsearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Search mail content");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_quicksearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textfield_quicksearch, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_drafts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_mailsend, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_refresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(button_advancedsearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_refresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_drafts)
                .addGap(78, 78, 78)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textfield_quicksearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_quicksearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_advancedsearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(button_mailsend)
                .addGap(14, 14, 14))
        );

        jSplitPane1.setLeftComponent(jPanel4);

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));

        jTabbedPane1.setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        table_mail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_mail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_mailMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                table_mailMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(table_mail);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inbox", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        table_sendedmail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_sendedmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_sendedmailMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                table_sendedmailMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(table_sendedmail);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sended Mail", jPanel3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("tab1\n");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        jSplitPane1.setRightComponent(jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jMenu3.setText("Edit");

        MenuItem_cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuItem_cut.setText("Cut");
        MenuItem_cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_cutActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItem_cut);

        MenuItem_copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuItem_copy.setText("Copy");
        MenuItem_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_copyActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItem_copy);

        MenuItem_paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuItem_paste.setText("Paste");
        MenuItem_paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_pasteActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItem_paste);
        jMenu3.add(jSeparator1);

        MenuItem_logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuItem_logout.setText("Log out");
        MenuItem_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_logoutActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItem_logout);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("View");

        CheckBoxMenuItem_darkmode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        CheckBoxMenuItem_darkmode.setText("Dark Mode");
        CheckBoxMenuItem_darkmode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxMenuItem_darkmodeActionPerformed(evt);
            }
        });
        jMenu4.add(CheckBoxMenuItem_darkmode);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_refreshActionPerformed
        if (Homescreen.user instanceof RegularUser) {
            
        
        ResultSet rset=null;
        ResultSet rsettomail=null;
        ResultSet rsetfrommail=null;
        String tomail=null;
        String frommail=null;
        
        try {
            //Founds the user on database and takes user's mail.
            rset=DatabaseManagement.SearchByEmail(Homescreen.user.getMail());
            try {
                while (rset.next()) {
                    if (rset!=null) {
                 tomail = rset.getString("mail");
                 
                }
                tblmodel.setRowCount(0);
                tblmodel1.setRowCount(0);
                
            }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            
            //Takes the mails that came to user and the mails that user sent as a Result Set.
            rsettomail=DatabaseManagement.SearchByToMail(tomail);
            rsetfrommail=DatabaseManagement.SearchByFromMail(tomail);
            while (rsettomail.next()) { 
                //Takes mail if it is not draft and mails that user sent.
                if(rsettomail.getInt("is_draft")!=1){
                String textMail = rsettomail.getString("text");
                String fromMail = rsettomail.getString("frommail");
                String toMail = rsettomail.getString("tomail");

// Adds new row to the table
tblmodel.addRow(new Object[] { textMail, fromMail, toMail });
                }
            }
            while (rsetfrommail.next()) { 
                //Takes mail if it is not draft and mails that came to the user.
                if(rsetfrommail.getInt("is_draft")!=1){
                String textMail = rsetfrommail.getString("text");
                String fromMail = rsetfrommail.getString("frommail");
                String toMail = rsetfrommail.getString("tomail");

// Adds new row to the table
tblmodel1.addRow(new Object[] { textMail, fromMail, toMail });
            }
            
}
        
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        }else{
            //Means that user has admin role. Admin can see all mails on screen.
            try {
                ResultSet rset=null;
                rset=DatabaseManagement.SearchAllMails();
                tblmodel.setRowCount(0);
                tblmodel1.setRowCount(0);
                
                while (rset.next()) {
                    //Searches all mails and takes their values and writes it on a both two jtable.
                String textMail = rset.getString("text");
                String fromMail = rset.getString("frommail");
                String toMail = rset.getString("tomail");
                int is_draft=rset.getInt("is_draft");
                String value;
                if(is_draft==1){
                    value="Yes";
                }else
                    value="No";
                
                tblmodel.addRow(new Object[] { textMail, fromMail, toMail,value });
                tblmodel1.addRow(new Object[] { textMail, fromMail, toMail,value });
                }
                
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_button_refreshActionPerformed

    private void button_mailsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_mailsendActionPerformed
        //Creates new frame to send mail.
        SendMailScreen form = new SendMailScreen();
        form.setVisible(true);
        
    }//GEN-LAST:event_button_mailsendActionPerformed

    private void button_draftsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_draftsActionPerformed
        //Creates new frame to see and change draft mails.
        DraftScreen form=new DraftScreen();
        form.setVisible(true);
        
    }//GEN-LAST:event_button_draftsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Creates new frame to edit current user's infos.
        EditUserScreen form = new EditUserScreen();
        form.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void table_mailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_mailMouseClicked
        //When you click on a mil that is on jtable, mail detail frame will created.
        int a=table_mail.getSelectedRow();
        
        String textMail=(String)table_mail.getValueAt(a, 0);
        String fromwho=(String)table_mail.getValueAt(a, 1);
        String towho=(String)table_mail.getValueAt(a, 2);
        //Takes values on jtable and sends them to MailDeatilScreen. Then with this values mail detail screen will created. 
        MailDetailScreen form= new MailDetailScreen(textMail, fromwho, towho);
        form.setVisible(true);
    }//GEN-LAST:event_table_mailMouseClicked

    private void table_sendedmailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_sendedmailMouseClicked
        //When you click on a mil that is on jtable, mail detail frame will created.
        int a=table_sendedmail.getSelectedRow();
        String textMail=(String)table_sendedmail.getValueAt(a, 0);
        String fromwho=(String)table_sendedmail.getValueAt(a, 1);
        String towho=(String)table_sendedmail.getValueAt(a, 2);
        //Takes values on jtable and sends them to MailDeatilScreen. Then with this values mail detail screen will created.
        MailDetailScreen form= new MailDetailScreen(textMail, fromwho, towho);
        form.setVisible(true);
    }//GEN-LAST:event_table_sendedmailMouseClicked

    private void button_quicksearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_quicksearchActionPerformed
        String str = textfield_quicksearch.getText().trim();
        tblmodel.setRowCount(0);
        tblmodel1.setRowCount(0);
        if (Homescreen.user instanceof RegularUser) {
            //User will see only user's own mails because User is Regular User 
        try {
            //Looks for if textfield empty or null. 
            if(str!=null&&!(str.equals(""))){
                //Takes user's mail and searchs mail content that is sent user 
            String mail=Homescreen.user.getMail();
            ResultSet rs=DatabaseManagement.SearchByTextTomail(str, mail);
            while(rs.next()){
            if(rs.getInt("is_draft")!=1){
                //Takes mail if it is not draft and mails that came to the user and that user searched.
                String textMail = rs.getString("text");
                String fromMail = rs.getString("frommail");
                String toMail = rs.getString("tomail");
                tblmodel.addRow(new Object[] { textMail, fromMail, toMail });
            }
            
                }
                }else{
                JOptionPane.showMessageDialog(rootPane, "Text field cannot be  empty");
            }
            
            if(str!=null&&!(str.equals(""))){
            String mail=Homescreen.user.getMail();
            ResultSet rs=DatabaseManagement.SearchByTextFrommail(str, mail);
            while(rs.next()){
            if(rs.getInt("is_draft")!=1){
                //Takes mail if it is not draft and mails that user sent and that user searched.
                String textMail = rs.getString("text");
                String fromMail = rs.getString("frommail");
                String toMail = rs.getString("tomail");
                tblmodel1.addRow(new Object[] { textMail, fromMail, toMail });
            }
            
                }
                }   
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        }else{
            //Means that user has admin role. Admin can see all mails on screen that he searched.
        try {
            
            if(str!=null&&!(str.equals(""))){
            
            ResultSet rs=DatabaseManagement.SearchAllMailsByText(str);
            while(rs.next()){
                //Searches all mails and takes their values and writes it on a both two jtable.
                String textMail = rs.getString("text");
                String fromMail = rs.getString("frommail");
                String toMail = rs.getString("tomail");
                int is_draft=rs.getInt("is_draft");
                String value;
                if(is_draft==1){
                    value="Yes";
                }else
                    value="No";
                tblmodel.addRow(new Object[] { textMail, fromMail, toMail,value });
                tblmodel1.addRow(new Object[] { textMail, fromMail, toMail,value });
            
                }
                }else{
                JOptionPane.showMessageDialog(rootPane, "Text field cannot be  empty");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        }
    }//GEN-LAST:event_button_quicksearchActionPerformed

    private void MenuItem_cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_cutActionPerformed
        //Takes the selected text on the textfield and saves it to the clipboard, then textfield will set to the empty.
        String selectedstr = textfield_quicksearch.getSelectedText();
        if(selectedstr!=null){
        StringSelection stringSelection = new StringSelection(selectedstr);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, stringSelection);
        }
        textfield_quicksearch.setText("");
    }//GEN-LAST:event_MenuItem_cutActionPerformed

    private void CheckBoxMenuItem_darkmodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxMenuItem_darkmodeActionPerformed
        boolean isDarkMode = CheckBoxMenuItem_darkmode.isSelected();

    
    

    // Changing components colors.
        if (isDarkMode) {
            
    table_mail.setBackground(Color.lightGray);
    table_sendedmail.setBackground(Color.lightGray);
    jPanel3.setBackground(Color.darkGray);
    jPanel2.setBackground(Color.darkGray);
    jPanel1.setBackground(Color.lightGray);
        }else{
        
    table_mail.setBackground(Color.white);
    table_sendedmail.setBackground(Color.white);
    jPanel3.setBackground(Color.white);
    jPanel2.setBackground(Color.white);
    jPanel1.setBackground(Color.white);
        }
    
    
    
    }//GEN-LAST:event_CheckBoxMenuItem_darkmodeActionPerformed

    private void MenuItem_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_logoutActionPerformed
        //First frame will be created and this frame will be closed. User that created while logging in will set to the null.
        Homescreen form=new Homescreen();
        form.setVisible(true);
        setVisible(false);
        Homescreen.user=null;
    }//GEN-LAST:event_MenuItem_logoutActionPerformed

    private void MenuItem_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_copyActionPerformed
         //Takes the selected text on the textfield and saves it to the clipboard.
        String selectedstr = textfield_quicksearch.getSelectedText();
        if(selectedstr!=null){
        StringSelection stringSelection = new StringSelection(selectedstr);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, stringSelection);
        }
    }//GEN-LAST:event_MenuItem_copyActionPerformed

    private void MenuItem_pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_pasteActionPerformed
        //Takes the saved data on the clipboard and set it to textfield if data is not null. 
        try {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            Transferable contents = clipboard.getContents(null);
            if (contents != null){
            String pastedText = (String) contents.getTransferData(DataFlavor.stringFlavor);
            textfield_quicksearch.setText(pastedText);
            }else{
            JOptionPane.showMessageDialog(rootPane, "Your clipboard is empty");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_MenuItem_pasteActionPerformed
    int rowAtpoint;
    int rowAtpoint1;
    Object o;
    private void table_mailMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_mailMousePressed
        if (evt.getButton() == MouseEvent.BUTTON3) {
                    // Show Popup menu on where mouse is located and take rowAtpoint value.
                    jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
                     rowAtpoint= table_mail.rowAtPoint(evt.getPoint());
                    o = evt.getSource();
                }
    }//GEN-LAST:event_table_mailMousePressed

    private void popupmenuitem_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupmenuitem_deleteActionPerformed
        //If user presses yes button on a jpane
        int result=JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete the mail?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if(result==JOptionPane.YES_OPTION){            
        if (o == table_mail&&(rowAtpoint != -1) ){
            //takes values in rowAtpoint and searches mails according to this values.
                        
                    String textMail=(String)table_mail.getValueAt(rowAtpoint, 0);
                    String fromwho=(String)table_mail.getValueAt(rowAtpoint, 1);
                    String towho=(String)table_mail.getValueAt(rowAtpoint, 2);
                    ResultSet rs=DatabaseManagement.SearchByMailAll(textMail, fromwho, towho);
                    
            try {
                while (rs.next()) {
                    //Takes id value on a found Result Set, founds mail with that value and deletes this mail.
                    int id=rs.getInt("id");
                    boolean truth_value=DatabaseManagement.DeleteMailById(id);
                    if(truth_value){
                        JOptionPane.showMessageDialog(rootPane, "Mail succesfully deleted");
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Mail cannot deleted");
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
                    }
                    else if(o==table_sendedmail&&(rowAtpoint != -1)){
                        //Takes values in rowAtpoint and searches mails according to this values. This method is for sended mails.
                    String textMail=(String)table_sendedmail.getValueAt(rowAtpoint, 0);
                    String fromwho=(String)table_sendedmail.getValueAt(rowAtpoint, 1);
                    String towho=(String)table_sendedmail.getValueAt(rowAtpoint, 2);
                    ResultSet rs=DatabaseManagement.SearchByMailAll(textMail, fromwho, towho);
                    
            try {
                while (rs.next()) {
                    //Takes id value on a found Result Set, founds mail with that value and deletes this mail. This method is for sended mails.
                    int id=rs.getInt("id");
                    boolean truth_value=DatabaseManagement.DeleteMailById(id);
                    if(truth_value){
                        JOptionPane.showMessageDialog(rootPane, "Mail succesfully deleted");
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Mail cannot deleted");
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
                    }
        }
    }//GEN-LAST:event_popupmenuitem_deleteActionPerformed
    
    private void table_sendedmailMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_sendedmailMousePressed
        if (evt.getButton() == MouseEvent.BUTTON3) {
                    // Show Popup menu on where mouse is located and take rowAtpoint value. For sended mails table.
                    jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
                     rowAtpoint1= table_sendedmail.rowAtPoint(evt.getPoint());
                     o = evt.getSource();
                }
    }//GEN-LAST:event_table_sendedmailMousePressed

    private void popupmenuitem_replyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupmenuitem_replyActionPerformed
        //Takes rowAtpoint and searches database with this values
        if (o == table_mail&&(rowAtpoint1 != -1) ){
                        
                    String textMail=(String)table_mail.getValueAt(rowAtpoint, 0);
                    String fromwho=(String)table_mail.getValueAt(rowAtpoint, 1);
                    String towho=(String)table_mail.getValueAt(rowAtpoint, 2);
                    ResultSet rs=DatabaseManagement.SearchByMailAll(textMail, fromwho, towho);
                    
            try {
                while (rs.next()) {
                    //Takes mail content value on Result Set and sends it to the SenMailScreen to write it jTextArea on SendMailScreen. Creates new SendMailScreen frame and closes this frame.
                    String text = rs.getString("text");
                    SendMailScreen form=new SendMailScreen(text);
                    form.setVisible(true);
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
                    }
                    //Doing same thing on the Sended mail jtable.
                    else if(o==table_sendedmail&&(rowAtpoint1 != -1)){
                    String textMail=(String)table_sendedmail.getValueAt(rowAtpoint1, 0);
                    String fromwho=(String)table_sendedmail.getValueAt(rowAtpoint1, 1);
                    String towho=(String)table_sendedmail.getValueAt(rowAtpoint1, 2);
                    ResultSet rs=DatabaseManagement.SearchByMailAll(textMail, fromwho, towho);
                    
            try {
                while (rs.next()) {
                    String text = rs.getString("text");
                    SendMailScreen form=new SendMailScreen(text);
                    form.setVisible(true);
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
                    }
        
        
    }//GEN-LAST:event_popupmenuitem_replyActionPerformed

    private void button_advancedsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_advancedsearchActionPerformed
        //Creates new frame to search mails in advanced way.
        AdvancedSearchScreen form = new AdvancedSearchScreen();
        form.setVisible(true);
    }//GEN-LAST:event_button_advancedsearchActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem CheckBoxMenuItem_darkmode;
    private javax.swing.JMenuItem MenuItem_copy;
    private javax.swing.JMenuItem MenuItem_cut;
    private javax.swing.JMenuItem MenuItem_logout;
    private javax.swing.JMenuItem MenuItem_paste;
    private javax.swing.JButton button_advancedsearch;
    private javax.swing.JButton button_drafts;
    private javax.swing.JButton button_mailsend;
    private javax.swing.JButton button_quicksearch;
    private javax.swing.JButton button_refresh;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem popupmenuitem_delete;
    private javax.swing.JMenuItem popupmenuitem_reply;
    private javax.swing.JTable table_mail;
    private javax.swing.JTable table_sendedmail;
    private javax.swing.JTextField textfield_quicksearch;
    // End of variables declaration//GEN-END:variables
}
